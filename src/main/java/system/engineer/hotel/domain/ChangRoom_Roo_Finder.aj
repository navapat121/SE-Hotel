// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package system.engineer.hotel.domain;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import system.engineer.hotel.domain.ChangRoom;
import system.engineer.hotel.domain.Customer;

privileged aspect ChangRoom_Roo_Finder {
    
    public static Long ChangRoom.countFindChangRoomsByOwnRoom(Customer ownRoom) {
        if (ownRoom == null) throw new IllegalArgumentException("The ownRoom argument is required");
        EntityManager em = ChangRoom.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ChangRoom AS o WHERE o.ownRoom = :ownRoom", Long.class);
        q.setParameter("ownRoom", ownRoom);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<ChangRoom> ChangRoom.findChangRoomsByOwnRoom(Customer ownRoom) {
        if (ownRoom == null) throw new IllegalArgumentException("The ownRoom argument is required");
        EntityManager em = ChangRoom.entityManager();
        TypedQuery<ChangRoom> q = em.createQuery("SELECT o FROM ChangRoom AS o WHERE o.ownRoom = :ownRoom", ChangRoom.class);
        q.setParameter("ownRoom", ownRoom);
        return q;
    }
    
    public static TypedQuery<ChangRoom> ChangRoom.findChangRoomsByOwnRoom(Customer ownRoom, String sortFieldName, String sortOrder) {
        if (ownRoom == null) throw new IllegalArgumentException("The ownRoom argument is required");
        EntityManager em = ChangRoom.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM ChangRoom AS o WHERE o.ownRoom = :ownRoom");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<ChangRoom> q = em.createQuery(queryBuilder.toString(), ChangRoom.class);
        q.setParameter("ownRoom", ownRoom);
        return q;
    }
    
}
